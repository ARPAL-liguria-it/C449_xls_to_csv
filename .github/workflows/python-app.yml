# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python
# Added testing on windows and macOS

name: Python application

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.12
      uses: actions/setup-python@v3
      with:
        python-version: "3.12"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8
        pip install -r requirements.txt
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with unittest
      run: |
        python -m unittest

  metadata:
    needs: build

    runs-on: [ windows-latest ]

    steps:
    - uses: actions/checkout@v4
    - name: Update metadata for Pyinstaller
      run: |
        pip install pyinstaller-versionfile
        create-version-file .\metadata.yml --outfile file_version_info.txt

  makeexe:
    needs: build

    runs-on: [ windows-latest ]

    steps:
      - uses: actions/checkout@v4

      - name: install Pyinstaller
        run: |
          pip install pyinstaller==6.10.0

      - name: make the exe file
        run: |
          pyinstaller \
            --clean \
            --onefile \
            --windowed \
            --version-file=file_version_info.txt \
            --name 'CSVMiPiaciTu' \
            .\converter\converter.py

      - name: upload the exe file
        id: artifact_upload
        uses: actions/upload-artifact@v4
        with:
          name: 'CSVMipiaciTu'
          path: './dist'
          compression-level: 6

      - name: If executable upload success
        id: exe_uploading
        if: steps.artifact_upload.conclusion == 'success'
        run: |
          echo "✔️ Executable **_(${{ inputs.upload_exe_with_name }})_** uploaded successfully" >> $GITHUB_STEP_SUMMARY
          echo "uploaded='true'" >> $GITHUB_OUTPUT

      - name: If executable upload fails
        if: failure() && steps.artifact_upload.conclusion == 'failure'
        run: |
          echo "::warning title=Failed-Upload::\
            Executable couldn't upload. \
            Check available storage at: 'settings > billing > Storage for Actions and Packages'."